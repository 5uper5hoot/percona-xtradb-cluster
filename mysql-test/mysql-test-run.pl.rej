--- mysql-test/mysql-test-run.pl
+++ mysql-test/mysql-test-run.pl
@@ -4341,239 +4341,225 @@ sub run_testcase ($) {
   }
 
   my $test= start_mysqltest($tinfo);
-  # Set only when we have to keep waiting after expectedly died server
-  my $keep_waiting_proc = 0;
   my $print_timeout= start_timer($print_freq * 60);
 
+  my @procs;
   while (1)
   {
-    my $proc;
-    if ($keep_waiting_proc)
+    if ($test_timeout > $print_timeout)
     {
-      # Any other process exited?
-      $proc = My::SafeProcess->check_any();
-      if ($proc)
+      my $proc = My::SafeProcess->wait_any_timeout($print_timeout);
+      mtr_verbose("Got $proc");
+      push @procs, $proc;
+      if ( $proc->{timeout} )
       {
-	mtr_verbose ("Found exited process $proc");
-      }
-      else
-      {
-	$proc = $keep_waiting_proc;
-	# Also check if timer has expired, if so cancel waiting
-	if ( has_expired($test_timeout) )
-	{
-	  $keep_waiting_proc = 0;
-	}
+        #print out that the test is still on
+        mtr_print("Test still running: $tinfo->{name}");
+        #reset the timer
+        $print_timeout= start_timer($print_freq * 60);
+        next;
       }
     }
-    if (! $keep_waiting_proc)
+    else
     {
-      if($test_timeout > $print_timeout)
-      {
-         $proc= My::SafeProcess->wait_any_timeout($print_timeout);
-         if ( $proc->{timeout} )
-         {
-            #print out that the test is still on
-            mtr_print("Test still running: $tinfo->{name}");
-            #reset the timer
-            $print_timeout= start_timer($print_freq * 60);
-            next;
-         }
-      }
-      else
+      my $proc= My::SafeProcess->check_any();
+
+      if ($proc) {
+        mtr_verbose("Got $proc");
+        push @procs, $proc;
+      } elsif ( has_expired($test_timeout) )
       {
-         $proc= My::SafeProcess->wait_any_timeout($test_timeout);
+        my $timeout= My::SafeProcess->wait_any_timeout($test_timeout);
+        push @procs, $timeout;
+      } else {
+        mtr_milli_sleep(100);
       }
     }
 
-    # Will be restored if we need to keep waiting
-    $keep_waiting_proc = 0;
-
-    unless ( defined $proc )
-    {
-      mtr_error("wait_any failed");
-    }
-    mtr_verbose("Got $proc");
-
     mark_time_used('test');
     # ----------------------------------------------------
     # Was it the test program that exited
     # ----------------------------------------------------
-    if ($proc eq $test)
-    {
-      my $res= $test->exit_status();
 
-      if ($res == 0 and $opt_warnings and check_warnings($tinfo) )
+    foreach my $proc (@procs) {
+      if ($proc eq $test)
       {
-	# Test case suceeded, but it has produced unexpected
-	# warnings, continue in $res == 1
-	$res= 1;
-	resfile_output($tinfo->{'warnings'}) if $opt_resfile;
-      }
+        my $res= $test->exit_status();
 
-      if ( $res == 0 )
-      {
-	my $check_res;
-	if ( restart_forced_by_test('force_restart') )
-	{
-	  stop_all_servers($opt_shutdown_timeout);
-	}
-	elsif ( $opt_check_testcases and
-	     $check_res= check_testcase($tinfo, "after"))
-	{
-	  if ($check_res == 1) {
-	    # Test case had sideeffects, not fatal error, just continue
-	    stop_all_servers($opt_shutdown_timeout);
-	    mtr_report("Resuming tests...\n");
-	    resfile_output($tinfo->{'check'}) if $opt_resfile;
-	  }
-	  else {
-	    # Test case check failed fatally, probably a server crashed
-	    report_failure_and_restart($tinfo);
-	    return 1;
-	  }
-	}
-	mtr_report_test_passed($tinfo);
-      }
-      elsif ( $res == 62 )
-      {
-	# Testcase itself tell us to skip this one
-	$tinfo->{skip_detected_by_test}= 1;
-	# Try to get reason from test log file
-	find_testcase_skipped_reason($tinfo);
-	mtr_report_test_skipped($tinfo);
-	# Restart if skipped due to missing perl, it may have had side effects
-	if ( restart_forced_by_test('force_restart_if_skipped') ||
-             $tinfo->{'comment'} =~ /^perl not found/ )
-	{
-	  stop_all_servers($opt_shutdown_timeout);
-	}
+        if ($res == 0 and $opt_warnings and check_warnings($tinfo) )
+        {
+          # Test case suceeded, but it has produced unexpected
+          # warnings, continue in $res == 1
+          $res= 1;
+          resfile_output($tinfo->{'warnings'}) if $opt_resfile;
+        }
+
+        if ( $res == 0 )
+        {
+          my $check_res;
+          if ( restart_forced_by_test('force_restart') )
+          {
+            stop_all_servers($opt_shutdown_timeout);
+          }
+          elsif ( $opt_check_testcases and
+            $check_res= check_testcase($tinfo, "after"))
+          {
+            if ($check_res == 1) {
+              # Test case had sideeffects, not fatal error, just continue
+              stop_all_servers($opt_shutdown_timeout);
+              mtr_report("Resuming tests...\n");
+              resfile_output($tinfo->{'check'}) if $opt_resfile;
+            }
+            else {
+              # Test case check failed fatally, probably a server crashed
+              report_failure_and_restart($tinfo);
+              return 1;
+            }
+          }
+          mtr_report_test_passed($tinfo);
+        }
+        elsif ( $res == 62 )
+        {
+          # Testcase itself tell us to skip this one
+          $tinfo->{skip_detected_by_test}= 1;
+          # Try to get reason from test log file
+          find_testcase_skipped_reason($tinfo);
+          mtr_report_test_skipped($tinfo);
+          # Restart if skipped due to missing perl, it may have had side effects
+          if ( restart_forced_by_test('force_restart_if_skipped') ||
+            $tinfo->{'comment'} =~ /^perl not found/ )
+          {
+            stop_all_servers($opt_shutdown_timeout);
+          }
+        }
+        elsif ( $res == 65 )
+        {
+          # Testprogram killed by signal
+          $tinfo->{comment}=
+            "testprogram crashed(returned code $res)";
+          report_failure_and_restart($tinfo);
+        }
+        elsif ( $res == 1 )
+        {
+          # Check if the test tool requests that
+          # an analyze script should be run
+          my $analyze= find_analyze_request();
+          if ($analyze){
+            run_on_all($tinfo, "analyze-$analyze");
+          }
+
+          # Wait a bit and see if a server died, if so report that instead
+          mtr_milli_sleep(100);
+          my $srvproc= My::SafeProcess::check_any();
+          if ($srvproc && grep($srvproc eq $_, started(all_servers()))) {
+            $proc= $srvproc;
+            goto SRVDIED;
+          }
+
+          # Test case failure reported by mysqltest
+          report_failure_and_restart($tinfo);
+        }
+        else
+        {
+          # mysqltest failed, probably crashed
+          $tinfo->{comment}=
+            "mysqltest failed with unexpected return code $res\n";
+          report_failure_and_restart($tinfo);
+        }
+
+        # Save info from this testcase run to mysqltest.log
+        if( -f $path_current_testlog)
+        {
+          if ($opt_resfile && $res && $res != 62) {
+            resfile_output_file($path_current_testlog);
+          }
+          mtr_appendfile_to_file($path_current_testlog, $path_testlog);
+          unlink($path_current_testlog);
+        }
+
+        return ($res == 62) ? 0 : $res;
       }
-      elsif ( $res == 65 )
+
+      # ----------------------------------------------------
+      # Check if it was an expected crash
+      # ----------------------------------------------------
+      my $check_crash = check_expected_crash_and_restart($proc);
+      mtr_verbose("check_expected_crash_and_restart - $check_crash - $proc");
+      if ($check_crash)
       {
-	# Testprogram killed by signal
-	$tinfo->{comment}=
-	  "testprogram crashed(returned code $res)";
-	report_failure_and_restart($tinfo);
+        # Keep waiting if it returned 2, if 1 don't wait or stop waiting.
+        if ($check_crash == 1) {
+          @procs = grep { $_ ne $proc } @procs;
+        }
+
+        next;
       }
-      elsif ( $res == 1 )
-      {
-	# Check if the test tool requests that
-	# an analyze script should be run
-	my $analyze= find_analyze_request();
-	if ($analyze){
-	  run_on_all($tinfo, "analyze-$analyze");
-	}
 
-	# Wait a bit and see if a server died, if so report that instead
-	mtr_milli_sleep(100);
-	my $srvproc= My::SafeProcess::check_any();
-	if ($srvproc && grep($srvproc eq $_, started(all_servers()))) {
-	  $proc= $srvproc;
-	  goto SRVDIED;
-	}
+    SRVDIED:
+      # ----------------------------------------------------
+      # Stop the test case timer
+      # ----------------------------------------------------
+      $test_timeout= 0;
 
-	# Test case failure reported by mysqltest
-	report_failure_and_restart($tinfo);
-      }
-      else
+      # ----------------------------------------------------
+      # Check if it was a server that died
+      # ----------------------------------------------------
+      if ( grep($proc eq $_, started(all_servers())) )
       {
-	# mysqltest failed, probably crashed
-	$tinfo->{comment}=
-	  "mysqltest failed with unexpected return code $res\n";
-	report_failure_and_restart($tinfo);
+        # Server failed, probably crashed
+        $tinfo->{comment}=
+          "Server $proc failed during test run" .
+          get_log_from_proc($proc, $tinfo->{name});
+
+        # ----------------------------------------------------
+        # It's not mysqltest that has exited, kill it
+        # ----------------------------------------------------
+        $test->kill();
+
+        report_failure_and_restart($tinfo);
+        return 1;
       }
 
-      # Save info from this testcase run to mysqltest.log
-      if( -f $path_current_testlog)
+      # Try to dump core for mysqltest and all servers
+      foreach my $proc ($test, started(all_servers()))
       {
-	if ($opt_resfile && $res && $res != 62) {
-	  resfile_output_file($path_current_testlog);
-	}
-	mtr_appendfile_to_file($path_current_testlog, $path_testlog);
-	unlink($path_current_testlog);
+        mtr_print("Trying to dump core for $proc");
+        if ($proc->dump_core())
+        {
+          $proc->wait_one(20);
+        }
       }
 
-      return ($res == 62) ? 0 : $res;
-
-    }
-
-    # ----------------------------------------------------
-    # Check if it was an expected crash
-    # ----------------------------------------------------
-    my $check_crash = check_expected_crash_and_restart($proc);
-    if ($check_crash)
-    {
-      # Keep waiting if it returned 2, if 1 don't wait or stop waiting.
-      $keep_waiting_proc = 0 if $check_crash == 1;
-      $keep_waiting_proc = $proc if $check_crash == 2;
-      next;
-    }
-
-  SRVDIED:
-    # ----------------------------------------------------
-    # Stop the test case timer
-    # ----------------------------------------------------
-    $test_timeout= 0;
-
-    # ----------------------------------------------------
-    # Check if it was a server that died
-    # ----------------------------------------------------
-    if ( grep($proc eq $_, started(all_servers())) )
-    {
-      # Server failed, probably crashed
-      $tinfo->{comment}=
-	"Server $proc failed during test run" .
-	get_log_from_proc($proc, $tinfo->{name});
-
       # ----------------------------------------------------
       # It's not mysqltest that has exited, kill it
       # ----------------------------------------------------
       $test->kill();
 
-      report_failure_and_restart($tinfo);
-      return 1;
-    }
-
-    # Try to dump core for mysqltest and all servers
-    foreach my $proc ($test, started(all_servers()))
-    {
-      mtr_print("Trying to dump core for $proc");
-      if ($proc->dump_core())
+      # ----------------------------------------------------
+      # Check if testcase timer expired
+      # ----------------------------------------------------
+      if ( $proc->{timeout} )
       {
-	$proc->wait_one(20);
-      }
-    }
-
-    # ----------------------------------------------------
-    # It's not mysqltest that has exited, kill it
-    # ----------------------------------------------------
-    $test->kill();
+        my $log_file_name= $opt_vardir."/log/".$tinfo->{shortname}.".log";
+        $tinfo->{comment}=
+          "Test case timeout after ".testcase_timeout($tinfo).
+          " seconds\n\n";
+        # Add 20 last executed commands from test case log file
+        if  (-e $log_file_name)
+        {
+          $tinfo->{comment}.=
+            "== $log_file_name == \n".
+	  mtr_lastlinesfromfile($log_file_name, 20)."\n";
+        }
+        $tinfo->{'timeout'}= testcase_timeout($tinfo); # Mark as timeout
+        run_on_all($tinfo, 'analyze-timeout');
 
-    # ----------------------------------------------------
-    # Check if testcase timer expired
-    # ----------------------------------------------------
-    if ( $proc->{timeout} )
-    {
-      my $log_file_name= $opt_vardir."/log/".$tinfo->{shortname}.".log";
-      $tinfo->{comment}=
-        "Test case timeout after ".testcase_timeout($tinfo).
-	  " seconds\n\n";
-      # Add 20 last executed commands from test case log file
-      if  (-e $log_file_name)
-      {
-        $tinfo->{comment}.=
-	   "== $log_file_name == \n".
-	     mtr_lastlinesfromfile($log_file_name, 20)."\n";
+        report_failure_and_restart($tinfo);
+        return 1;
       }
-      $tinfo->{'timeout'}= testcase_timeout($tinfo); # Mark as timeout
-      run_on_all($tinfo, 'analyze-timeout');
 
-      report_failure_and_restart($tinfo);
-      return 1;
+      mtr_error("Unhandled process $proc exited");
     }
-
-    mtr_error("Unhandled process $proc exited");
   }
   mtr_error("Should never come here");
 }
