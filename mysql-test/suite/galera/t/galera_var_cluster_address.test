#
# Check the handling of @@wsrep_cluster_address
#

--source include/galera_cluster.inc
--source include/have_innodb.inc

#
# Set to invalid value
# 

--connection node_1
--let $wsrep_cluster_address_node1 = `SELECT @@wsrep_cluster_address`
SET GLOBAL wsrep_cluster_address = 'foo://';

# With wsrep_sync_wait, this returns an error
--error ER_LOCK_WAIT_TIMEOUT
SHOW STATUS;

SET SESSION wsrep_sync_wait=0;

# This should work even with wsrep_ready OFF in PXC
--disable_result_log
# OFF to avoid variability among debug and release builds
# We are only interested in non-error result.
SELECT COUNT(*) FROM INFORMATION_SCHEMA.GLOBAL_STATUS;
--enable_result_log

# Must return 'OFF'
SHOW STATUS LIKE 'wsrep_ready';

# Must return 'Non-primary'
SHOW STATUS LIKE 'wsrep_cluster_status';

# Must return 0 = 'Initialized'
SHOW STATUS LIKE 'wsrep_local_state';
SHOW STATUS LIKE 'wsrep_local_state_comment';

--connection node_2
--sleep 1
# Node #2 thinks that it is now part of a single-node primary cluster 
--disable_warnings
SELECT VARIABLE_VALUE = 1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size';
SELECT VARIABLE_VALUE = 'Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_status';
--enable_warnings

#
# Reset everything as it was
#

--connection node_1
--disable_query_log
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_node1';
--enable_query_log

--connection node_2
SET GLOBAL wsrep_cluster_address = @@wsrep_cluster_address;
--source include/wait_until_connected_again.inc

--connection node_1
--disable_warnings
SELECT VARIABLE_VALUE = 'Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_status';
SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--enable_warnings

#
# Set to invalid host
#

--connection node_1
SET GLOBAL wsrep_cluster_address = 'gcomm://192.0.2.1';

# This should work even with wsrep_ready OFF in PXC
--disable_result_log
SELECT COUNT(*) FROM INFORMATION_SCHEMA.GLOBAL_STATUS;
--enable_result_log

# Must return 'OFF'
SHOW STATUS LIKE 'wsrep_ready';

# Must return 'Non-primary'
SHOW STATUS LIKE 'wsrep_cluster_status';

# Must return 0 = 'Initialized'
SHOW STATUS LIKE 'wsrep_local_state';
SHOW STATUS LIKE 'wsrep_local_state_comment';

#
# Reset everything as it was
#

--connection node_1
--disable_query_log
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_node1';
--enable_query_log

--connection node_2
SET GLOBAL wsrep_cluster_address = @@wsrep_cluster_address;
--source include/wait_until_connected_again.inc

--connection node_1
--disable_warnings
SELECT VARIABLE_VALUE = 'Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_status';
SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--enable_warnings

#
# Set to an invalid host and change the number of slave threads
#

--connection node_1
--let $wsrep_slave_threads = `SELECT @@wsrep_slave_threads`
SET GLOBAL wsrep_cluster_address = 'gcomm://192.0.2.1';

# This should work even with wsrep_ready OFF in PXC
--disable_result_log
SELECT COUNT(*) FROM INFORMATION_SCHEMA.GLOBAL_STATUS;
--enable_result_log

# Must return 'OFF'
SHOW STATUS LIKE 'wsrep_connected';

# Should see a warning message, but not a crash
--eval SET GLOBAL wsrep_slave_threads = $wsrep_slave_threads + 16;

#
# Reset everything as it was
#

--connection node_1
--eval SET GLOBAL wsrep_slave_threads = $wsrep_slave_threads;
--disable_query_log
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_node1';
--enable_query_log

--connection node_2
SET GLOBAL wsrep_cluster_address = @@wsrep_cluster_address;
--source include/wait_until_connected_again.inc

--connection node_1
--disable_warnings
SELECT VARIABLE_VALUE = 'Primary' FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_status';
SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--enable_warnings

CALL mtr.add_suppression("Backend not supported: foo");
CALL mtr.add_suppression("Failed to initialize backend using 'foo");
CALL mtr.add_suppression("Failed to open channel 'my_wsrep_cluster' at 'foo");
CALL mtr.add_suppression("gcs connect failed: Socket type not supported");
CALL mtr.add_suppression("wsrep::connect\\(\\) failed: 7");
CALL mtr.add_suppression("gcs_caused\\(\\) returned -103 \\(Software caused connection abort\\)");
CALL mtr.add_suppression("failed to open gcomm backend connection: 110: failed to reach primary view: 110");
CALL mtr.add_suppression("Failed to open backend connection: -110 \\(Connection timed out\\)");
CALL mtr.add_suppression("Failed to open channel 'my_wsrep_cluster' at 'gcomm://192\\.0\\.2\\.1': -110 \\(Connection timed out\\)");
CALL mtr.add_suppression("gcs connect failed: Connection timed out");
CALL mtr.add_suppression("WSREP: wsrep::connect\\(foo://\\) failed: 7");
CALL mtr.add_suppression("WSREP: wsrep::connect\\(gcomm://192.0.2.1\\) failed: 7");
CALL mtr.add_suppression("WSREP: Trying to launch slave threads before creating connection at 'gcomm://192.0.2.1'");


#-------------------------------------------------------------------------------
#
# Re-load wsrep_cluster_address with audit-plugin enabled and active parallel
# connection. Closing of connection during stop replication shouldn't
# generate audit-plugin events.
#
--connection node_2
--let $wsrep_cluster_address_orig = `SELECT @@wsrep_cluster_address`
INSTALL PLUGIN audit_log SONAME 'audit_log.so';

--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
show status like 'wsrep_local_state_comment';

--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_orig';
--source include/wait_until_connected_again.inc
--source include/galera_wait_ready.inc
#
UNINSTALL PLUGIN audit_log;
show status like 'wsrep_cluster_size';

